{"version":3,"mappings":"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","names":["RetrievalMode","PAIDRetrievalMode","AppStateContext","createContext","AppStateProvider","children","sharedState","setSharedState","useState","jsx","Layout","selectedMode","setSelectedMode","appStateContext","useContext","handleModeChange","event","prev","jsxs","styles","Link","Outlet","parseAnswerToHtml","answer","isStreaming","onCitationClicked","citations","parsedAnswer","lastIndex","i","part","index","citationIndex","renderToStaticMarkup","AnswerIcon","Sparkle28Filled","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","followupQuestions","messageContent","useMemo","sanitizedAnswerHtml","DOMPurify","Stack","IconButton","rowId","ind","citation","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","error","onRetry","ErrorCircle24Regular","PrimaryButton","QuestionInput","onSend","disabled","placeholder","clearOnSend","initQuestion","question","setQuestion","useEffect","sendQuestion","onEnterPress","ev","onQuestionChange","_ev","newValue","TextField","Tooltip","Button","Send28Filled","Example","text","value","onClick","DEFAULT_EXAMPLES","ExampleList","onExampleClicked","UserChatMessage","message","AnalysisPanelTabs","SyntaxHighlighter","json","ThoughtProcess","thoughts","t","k","a11yLight","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","setCitation","fetchCitation","originalHash","citationContent","citationObjectUrl","Pivot","pivotItem","PivotItem","ClearChatButton","Delete24Regular","VectorSettings","updateRetrievalMode","retrievalMode","setRetrievalMode","onRetrievalModeChange","option","Dropdown","simpleResponse","rerankerResponse","graphResponse","Chat","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","temperature","setTemperature","retrieveCount","setRetrieveCount","useAdvancedFlow","setUseAdvancedFlow","shouldStream","setShouldStream","lastQuestionRef","useRef","chatMessageStreamEnd","isLoading","setIsLoading","setIsStreaming","setError","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","answers","setAnswers","streamedAnswers","setStreamedAnswers","handleAsyncRequest","result","chatCompletion","updateState","newContent","resolve","latestCompletion","response","makeApiRequest","allMessages","options","chatClient","AIChatProtocolClient","parsedResponse","e","clearChat","onPromptTemplateChange","onTemperatureChange","range","onRetrieveCountChange","onUseAdvancedFlowChange","checked","onShouldStreamChange","example","onShowCitation","onToggleTab","tab","streamedAnswer","c","q","Fragment","SparkleFilled","x","Panel","DefaultButton","Checkbox","SpinButton","Slider","chat","initializeIcons","router","createHashRouter","__vitePreload","ReactDOM","React","RouterProvider"],"sources":["../../../frontend/src/api/models.ts","../../../frontend/src/AppStateContext/AppStateContext.tsx","../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/components/Answer/AnswerIcon.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/Example/Example.tsx","../../../frontend/src/components/Example/ExampleList.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/src/components/AnalysisPanel/ThoughtProcess.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/components/VectorSettings/VectorSettings.tsx","../../../frontend/src/hack/simpleResponse.tsx","../../../frontend/src/hack/rerankerResponse.tsx","../../../frontend/src/hack/graphResponse.tsx","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["import { AIChatCompletion, AIChatCompletionDelta, AIChatCompletionOperationOptions } from \"@microsoft/ai-chat-protocol\";\n\nexport const enum RetrievalMode {\n    Hybrid = \"hybrid\",\n    Vectors = \"vectors\",\n    Text = \"text\"\n}\n\nexport const enum PAIDRetrievalMode {\n    Vector = \"Vector Search\",\n    Semantic = \"Semantic Ranker\",\n    GraphRAG = \"GraphRAG\"\n}\n\nexport type ChatAppRequestOverrides = {\n    use_advanced_flow?: boolean;\n    retrieval_mode?: RetrievalMode;\n    top?: number;\n    temperature?: number;\n    prompt_template?: string;\n};\n\nexport type ChatAppRequestContext = {\n    overrides: ChatAppRequestOverrides;\n};\n\nexport interface ChatAppRequestOptions extends AIChatCompletionOperationOptions {\n    context: ChatAppRequestContext\n}\n\nexport type Thoughts = {\n    title: string;\n    description: any; // It can be any output from the api\n    props?: { [key: string]: string };\n};\n\nexport type RAGContext = {\n    data_points: { [key: string]: any };\n    followup_questions: string[] | null;\n    thoughts: Thoughts[];\n};\n\nexport interface RAGChatCompletion extends AIChatCompletion {\n    context: RAGContext;\n}\n\nexport interface RAGChatCompletionDelta extends AIChatCompletionDelta {\n    context: RAGContext;\n}\n","import React, { createContext, useState, ReactNode, FC } from 'react';\nimport { PAIDRetrievalMode } from \"../api/models\";\n\n// Define the context's value type\ninterface AppStateContextType {\n  sharedState: PAIDRetrievalMode;\n  setSharedState: React.Dispatch<React.SetStateAction<PAIDRetrievalMode>>;\n}\n\n// Create the context with a default value of undefined\nexport const AppStateContext = createContext<AppStateContextType | undefined>(undefined);\n\n// Create the AppStateProvider component to manage shared state\nexport const AppStateProvider: FC<{ children: ReactNode }> = ({ children }) => {\n  const [sharedState, setSharedState] = useState<PAIDRetrievalMode>(PAIDRetrievalMode.Vector);\n\n  return (\n    <AppStateContext.Provider value={{ sharedState, setSharedState }}>\n      {children}\n    </AppStateContext.Provider>\n  );\n};\n","import { Outlet, Link } from \"react-router-dom\";\nimport { SetStateAction, useState } from \"react\";\nimport styles from \"./Layout.module.css\";\nimport { PAIDRetrievalMode } from \"../../api\";\nimport React, { useContext } from 'react';\nimport { AppStateContext } from '../../AppStateContext/AppStateContext';\n\ninterface RetrievalModeProps {\n    updatePAIDRetrievalMode: (retrievalMode: PAIDRetrievalMode) => void;\n}\n\nconst Layout = () => {\n    const [selectedMode, setSelectedMode] = useState(\"Vector Search\");\n    const appStateContext = useContext(AppStateContext);\n    if (!appStateContext) {\n        throw new Error('Layout component must be used within an AppStateProvider');\n    }\n    const { sharedState, setSharedState } = appStateContext;\n\n    const handleModeChange = (event: { target: { value: SetStateAction<string>; }; }) => {\n        setSelectedMode(event.target.value);\n        console.log(\"handleModeChange: \" + (event.target.value as PAIDRetrievalMode).toString());\n        setSharedState((prev: any) => (event.target.value as PAIDRetrievalMode));\n    };\n\n    return (\n        <div className={styles.layout}>\n            <header className={styles.header} role={\"banner\"}>\n                <div className={styles.headerContainer}>\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\n                        <h3 className={styles.headerTitle}>Legal Research Assistant</h3>\n                    </Link>\n\n                    <div className={styles.radioContainer}>\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value=\"Vector Search\"\n                                checked={selectedMode === \"Vector Search\"}\n                                onChange={handleModeChange}\n                                className={styles.radioInput}\n                            />\n                            Vector Search\n                        </label>\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value=\"Semantic Ranker\"\n                                checked={selectedMode === \"Semantic Ranker\"}\n                                onChange={handleModeChange}\n                                className={styles.radioInput}\n                            />\n                            Semantic Ranker\n                        </label>\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value=\"GraphRAG\"\n                                checked={selectedMode === \"GraphRAG\"}\n                                onChange={handleModeChange}\n                                className={styles.radioInput}\n                            />\n                            GraphRAG + Semantic Ranker\n                        </label>\n                    </div>\n\n                    <h4 className={styles.headerRightText}>Demo: GraphRAG on PostgreSQL</h4>\n                </div>\n            </header>\n\n            <Outlet />\n        </div>\n    );\n};\n\nexport default Layout;","import { renderToStaticMarkup } from \"react-dom/server\";\n\ntype HtmlParsedAnswer = {\n    answerHtml: string;\n    citations: string[];\n};\n\nexport function parseAnswerToHtml(answer: string, isStreaming: boolean, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\n    const citations: string[] = [];\n\n    // trim any whitespace from the end of the answer after removing follow-up questions\n    let parsedAnswer = answer.trim();\n\n    // Omit a citation that is still being typed during streaming\n    if (isStreaming) {\n        let lastIndex = parsedAnswer.length;\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\n            if (parsedAnswer[i] === \"]\") {\n                break;\n            } else if (parsedAnswer[i] === \"[\") {\n                lastIndex = i;\n                break;\n            }\n        }\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\n        parsedAnswer = truncatedAnswer;\n    }\n\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\n\n    const fragments: string[] = parts.map((part, index) => {\n        if (index % 2 === 0) {\n            return part;\n        } else {\n            let citationIndex: number;\n            if (citations.indexOf(part) !== -1) {\n                citationIndex = citations.indexOf(part) + 1;\n            } else {\n                citations.push(part);\n                citationIndex = citations.length;\n            }\n\n            return renderToStaticMarkup(\n                <a className=\"supContainer\" title={part}>\n                    <sup>{citationIndex}</sup>\n                </a>\n            );\n        }\n    });\n\n    return {\n        answerHtml: fragments.join(\"\"),\n        citations\n    };\n}\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\n\nexport const AnswerIcon = () => {\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\n};\n","import { useMemo } from \"react\";\nimport { Stack, IconButton } from \"@fluentui/react\";\nimport DOMPurify from \"dompurify\";\n\nimport styles from \"./Answer.module.css\";\n\nimport { RAGChatCompletion } from \"../../api/models\";\nimport { parseAnswerToHtml } from \"./AnswerParser\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\ninterface Props {\n    answer: RAGChatCompletion;\n    isSelected?: boolean;\n    isStreaming: boolean;\n    onCitationClicked: (filePath: string) => void;\n    onThoughtProcessClicked: () => void;\n    onSupportingContentClicked: () => void;\n    onFollowupQuestionClicked?: (question: string) => void;\n    showFollowupQuestions?: boolean;\n}\n\nexport const Answer = ({\n    answer,\n    isSelected,\n    isStreaming,\n    onCitationClicked,\n    onThoughtProcessClicked,\n    onSupportingContentClicked,\n    onFollowupQuestionClicked,\n    showFollowupQuestions\n}: Props) => {\n    const followupQuestions = answer.context.followup_questions;\n    const messageContent = answer.message.content;\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(messageContent, isStreaming, onCitationClicked), [answer]);\n\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\n\n    return (\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\n            <Stack.Item>\n                <Stack horizontal horizontalAlign=\"space-between\">\n                    <AnswerIcon />\n                    <div>\n                            <IconButton\n                                style={{ color: \"black\" }}\n                                iconProps={{ iconName: \"HomeGroup\" }} // \"TFVCLogo\"\n                                title=\"Show graph\"\n                                ariaLabel=\"Show graph\"\n                                onClick={() => onThoughtProcessClicked()}\n                                disabled = { false }\n                            />\n                    </div>\n                    { false && (\n                        <div>\n                            <IconButton\n                                style={{ color: \"black\" }}\n                                iconProps={{ iconName: \"Lightbulb\" }}\n                                title=\"Show thought process\"\n                                ariaLabel=\"Show thought process\"\n                                onClick={() => onThoughtProcessClicked()}\n                                disabled = {!answer.context.thoughts?.length}\n                            />\n                        </div>\n                    )}\n                </Stack>\n            </Stack.Item>\n\n            <Stack.Item grow>\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\n            </Stack.Item>\n\n            {!!parsedAnswer.citations.length && (\n                <Stack.Item>\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\n                        <span className={styles.citationLearnMore}>References:</span>\n                        <ol>\n                        {parsedAnswer.citations.map((rowId, ind) => {\n                            const citation = answer.context.data_points[rowId];\n                            if (!citation) return null;\n                            return (\n                                <li key={rowId}>\n                                    <h4>{citation.name}</h4>\n                                    <p className={styles.referenceMetadata}>Brand: {citation.brand}</p>\n                                    <p className={styles.referenceMetadata}>Price: {citation.price}</p>\n                                    <p>{citation.description}</p>\n                                </li>\n                            );\n                        })}\n                        </ol>\n                    </Stack>\n                </Stack.Item>\n            )}\n\n            {!!followupQuestions?.length && showFollowupQuestions && onFollowupQuestionClicked && (\n                <Stack.Item>\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\n                        <span className={styles.followupQuestionLearnMore}>Follow-up questions:</span>\n                        {followupQuestions.map((x, i) => {\n                            return (\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\n                                    {`${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n        </Stack>\n    );\n};\n","import { Stack } from \"@fluentui/react\";\nimport { animated, useSpring } from \"@react-spring/web\";\n\nimport styles from \"./Answer.module.css\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\nexport const AnswerLoading = () => {\n    const animatedStyles = useSpring({\n        from: { opacity: 0 },\n        to: { opacity: 1 }\n    });\n\n    return (\n        <animated.div style={{ ...animatedStyles }}>\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n                <AnswerIcon />\n                <Stack.Item grow>\n                    <p className={styles.answerText}>\n                        Generating answer\n                        <span className={styles.loadingdots} />\n                    </p>\n                </Stack.Item>\n            </Stack>\n        </animated.div>\n    );\n};\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./Answer.module.css\";\n\ninterface Props {\n    error: string;\n    onRetry: () => void;\n}\n\nexport const AnswerError = ({ error, onRetry }: Props) => {\n    return (\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\n\n            <Stack.Item grow>\n                <p className={styles.answerText}>{error}</p>\n            </Stack.Item>\n\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\n        </Stack>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { Stack, TextField } from \"@fluentui/react\";\nimport { Button, Tooltip } from \"@fluentui/react-components\";\nimport { Send28Filled } from \"@fluentui/react-icons\";\n\nimport styles from \"./QuestionInput.module.css\";\n\ninterface Props {\n    onSend: (question: string) => void;\n    disabled: boolean;\n    initQuestion?: string;\n    placeholder?: string;\n    clearOnSend?: boolean;\n}\n\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend, initQuestion }: Props) => {\n    const [question, setQuestion] = useState<string>(\"\");\n\n    useEffect(() => {\n        initQuestion && setQuestion(initQuestion);\n    }, [initQuestion]);\n\n    const sendQuestion = () => {\n        if (disabled || !question.trim()) {\n            return;\n        }\n\n        onSend(question);\n\n        if (clearOnSend) {\n            setQuestion(\"\");\n        }\n    };\n\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\n            ev.preventDefault();\n            sendQuestion();\n        }\n    };\n\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        if (!newValue) {\n            setQuestion(\"\");\n        } else if (newValue.length <= 1000) {\n            setQuestion(newValue);\n        }\n    };\n\n    return (\n        <Stack horizontal className={styles.questionInputContainer}>\n            <TextField\n                className={styles.questionInputTextArea}\n                placeholder={placeholder}\n                multiline\n                resizable={false}\n                borderless\n                value={question}\n                onChange={onQuestionChange}\n                onKeyDown={onEnterPress}\n            />\n            <div className={styles.questionInputButtonsContainer}>\n                <Tooltip content=\"Ask question button\" relationship=\"label\">\n                    <Button size=\"large\" icon={<Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} onClick={sendQuestion} />\n                </Tooltip>\n            </div>\n        </Stack>\n    );\n};\n","import styles from \"./Example.module.css\";\n\ninterface Props {\n    text: string;\n    value: string;\n    onClick: (value: string) => void;\n}\n\nexport const Example = ({ text, value, onClick }: Props) => {\n    return (\n        <div className={styles.example} onClick={() => onClick(value)}>\n            <p className={styles.exampleText}>{text}</p>\n        </div>\n    );\n};\n","import { Example } from \"./Example\";\n\nimport styles from \"./Example.module.css\";\n\nconst DEFAULT_EXAMPLES: string[] = [\n    \"Water leaking into the apartment from the floor above. What are the prominent legal precedents in Washington on this problem?\",\n    \"When the landlord is sued in court for leaking pipes, how many times did it result in a favorable decision for the lessee?\",\n];\n\ninterface Props {\n    onExampleClicked: (value: string) => void\n}\n\nexport const ExampleList = ({ onExampleClicked }: Props) => {\n    return (\n        <ul className={styles.examplesNavList}>\n            {DEFAULT_EXAMPLES.map((question, i) => (\n                <li key={i}>\n                    <Example text={question} value={question} onClick={onExampleClicked} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import styles from \"./UserChatMessage.module.css\";\n\ninterface Props {\n    message: string;\n}\n\nexport const UserChatMessage = ({ message }: Props) => {\n    return (\n        <div className={styles.container}>\n            <div className={styles.message}>{message}</div>\n        </div>\n    );\n};\n","export enum AnalysisPanelTabs {\n    GraphTab = \"graph\",\n    ThoughtProcessTab = \"thoughtProcess\",\n    SupportingContentTab = \"supportingContent\",\n    CitationTab = \"citation\"\n}\n","import { Stack } from \"@fluentui/react\";\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport json from \"react-syntax-highlighter/dist/esm/languages/hljs/json\";\nimport { a11yLight } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { Thoughts } from \"../../api\";\n\nSyntaxHighlighter.registerLanguage(\"json\", json);\n\ninterface Props {\n    thoughts: Thoughts[];\n}\n\nexport const ThoughtProcess = ({ thoughts }: Props) => {\n    return (\n        <ul className={styles.tList}>\n            {thoughts.map((t, ind) => {\n                return (\n                    <li className={styles.tListItem} key={ind}>\n                        <div className={styles.tStep}>{t.title}</div>\n                        <Stack horizontal tokens={{ childrenGap: 5 }}>\n                            {t.props &&\n                                (Object.keys(t.props) || []).map((k: any) => (\n                                    <span className={styles.tProp}>\n                                        {k}: {JSON.stringify(t.props?.[k])}\n                                    </span>\n                                ))}\n                        </Stack>\n                        {Array.isArray(t.description) ? (\n                            <SyntaxHighlighter language=\"json\" wrapLongLines className={styles.tCodeBlock} style={a11yLight}>\n                                {JSON.stringify(t.description, null, 2)}\n                            </SyntaxHighlighter>\n                        ) : (\n                            <div>{t.description}</div>\n                        )}\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","import { Stack, Pivot, PivotItem } from \"@fluentui/react\";\n\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { SupportingContent } from \"../SupportingContent\";\nimport { RAGChatCompletion } from \"../../api\";\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\nimport { ThoughtProcess } from \"./ThoughtProcess\";\nimport { MarkdownViewer } from \"../MarkdownViewer\";\nimport { useState, useEffect } from \"react\";\n\ninterface Props {\n    className: string;\n    activeTab: AnalysisPanelTabs;\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\n    activeCitation: string | undefined;\n    citationHeight: string;\n    answer: RAGChatCompletion;\n}\n\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\n\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\n    const isDisabledThoughtProcessTab: boolean = !answer.context.thoughts;\n    const isDisabledSupportingContentTab: boolean = true;// !answer.context.data_points;\n    const isDisabledCitationTab: boolean = true; //!activeCitation;\n    const [citation, setCitation] = useState(\"\");\n\n\n    const fetchCitation = async () => {\n        if (activeCitation) {\n            // Get hash from the URL as it may contain #page=N\n            // which helps browser PDF renderer jump to correct page N\n            const originalHash = activeCitation.indexOf(\"#\") ? activeCitation.split(\"#\")[1] : \"\";\n            const response = await fetch(activeCitation, {\n                method: \"GET\"\n            });\n            const citationContent = await response.blob();\n            let citationObjectUrl = URL.createObjectURL(citationContent);\n            // Add hash back to the new blob URL\n            if (originalHash) {\n                citationObjectUrl += \"#\" + originalHash;\n            }\n            setCitation(citationObjectUrl);\n        }\n    };\n    useEffect(() => {\n        fetchCitation();\n    }, []);\n\n    const renderFileViewer = () => {\n        if (!activeCitation) {\n            return null;\n        }\n\n        const fileExtension = activeCitation.split(\".\").pop()?.toLowerCase();\n        switch (fileExtension) {\n            case \"png\":\n                return <img src={citation} className={styles.citationImg} alt=\"Citation Image\" />;\n            case \"md\":\n                return <MarkdownViewer src={activeCitation} />;\n            default:\n                return <iframe title=\"Citation\" src={citation} width=\"100%\" height={citationHeight} />;\n        }\n    };\n\n    return (\n        <Pivot\n            className={className}\n            selectedKey={activeTab}\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\n        >\n            <PivotItem\n                itemKey={AnalysisPanelTabs.GraphTab}\n                headerText=\"Citation Graph\"\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\n            >\n                <ThoughtProcess thoughts={answer.context.thoughts || []} />\n            </PivotItem>\n        </Pivot>\n    );\n};\n","import { Delete24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\n\nimport styles from \"./ClearChatButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Delete24Regular />} disabled={disabled} onClick={onClick}>\n                {\"Clear chat\"}\n            </Button>\n        </div>\n    );\n};\n","import { useState } from \"react\";\nimport { Stack, IDropdownOption, Dropdown } from \"@fluentui/react\";\n\nimport styles from \"./VectorSettings.module.css\";\nimport { RetrievalMode } from \"../../api\";\n\ninterface Props {\n    updateRetrievalMode: (retrievalMode: RetrievalMode) => void;\n}\n\nexport const VectorSettings = ({ updateRetrievalMode }: Props) => {\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined) => {\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\n        updateRetrievalMode(option?.data || RetrievalMode.Hybrid);\n    };\n\n\n    return (\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\n            <Dropdown\n                label=\"Retrieval mode\"\n                options={[\n                    { key: \"hybrid\", text: \"Vectors + Text (Hybrid)\", selected: retrievalMode == RetrievalMode.Hybrid, data: RetrievalMode.Hybrid },\n                    { key: \"vectors\", text: \"Vectors\", selected: retrievalMode == RetrievalMode.Vectors, data: RetrievalMode.Vectors },\n                    { key: \"text\", text: \"Text\", selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\n                ]}\n                required\n                onChange={onRetrievalModeChange}\n            />\n\n        </Stack>\n    );\n};\n","export const simpleResponse: any = {\n    content: `\n    In Washington State, there are several legal precedents and relevant doctrines concerning property damage resulting from water leakage or damage caused by water leaks from an adjacent or above unit. Here are some prominent cases and doctrines:\n\n    &nbsp;&nbsp;&nbsp;&nbsp;<b>1. Common Enemy Doctrine and Its Exceptions:</b>\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• The Common Enemy Doctrine generally allows property owners to protect their property from surface water, even if this causes damage to neighboring properties.\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• Exceptions to the Common Enemy Doctrine: Washington courts have adopted certain exceptions that limit the doctrine's application, particularly concerning artificial collection and discharge of water in quantities or manners different from the natural flow. Some relevant cases include:\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• Wilber Development Corp. v. Les Rowland Constr., Inc. (83 Wn.2d 871, 1974): The court held that municipalities are liable if they collect surface water by artificial means and discharge it in a manner that causes substantial injury to private property.\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• Washington Hydroculture, Inc. v. Payne (96 Wash. 2d 322, 1981): The court discussed lessee's responsibility under a general maintenance and delivery clause but found that rebuilding after destruction by fire through no fault of the lessee was not required without an express covenant to that effect.\n    \n    &nbsp;&nbsp;&nbsp;&nbsp;<b>2. Cases Related to Water Damage:</b>\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• United Mutual Savings Bank v. Riebli (55 Wash. 2d 816, 1960): This case addressed the application of the doctrine of res ipsa loquitur concerning water damage caused by a ruptured pipe. The court found that the tenants were not liable for the damage caused by a latent defect (the ruptured pipe) since it was installed before their occupancy and was not under their exclusive control.\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• Strickland v. City of Seattle (62 Wash. 2d 912, 1963): The court held that a city is not negligent if it increases the flow of water through a natural drainway due to urban improvements like streets and catch basins unless the drainage is increased beyond the capacity of the natural watercourse.\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• King County v. Boeing Co. (62 Wash. 2d 545, 1963): The court addressed issues related to the artificial collection and discharge of surface waters and found that the discharge should not exceed natural flow without causing damage to adjacent properties.\n\n    &nbsp;&nbsp;&nbsp;&nbsp;<b>2. Doctrine of Damnum Absque Injuria:</b>\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• Wilkening v. State (54 Wn.2d 692, 1959): The court applied the doctrine of damnum absque injuria (damage without injury) where lawful actions on one's property (like improving it and protecting it from surface water) resulted in incidental damage to a neighboring property. The court held that such incidental damages do not constitute a legal injury requiring compensation.\n    \n    Based on these precedents, a person dealing with water leaking into an apartment from the floor above should consider the following steps:\n    &nbsp;&nbsp;&nbsp;&nbsp;• Determine the source and cause of the leak (latent defect, negligence, etc.).\n    &nbsp;&nbsp;&nbsp;&nbsp;• Review lease agreements and clauses related to maintenance, repairs, and liability for damage.\n    &nbsp;&nbsp;&nbsp;&nbsp;• Assess whether the damage is due to an artificial collection and discharge of water that exceeds natural flows.\n    &nbsp;&nbsp;&nbsp;&nbsp;• Evaluate the possibility of negligence or failure to properly maintain and repair the premises by the upstairs tenant or property management.\n    \n    Consulting a legal professional with experience in property and tenancy law in Washington can provide specific advice and help navigate the complexities of such cases.\n    `,\n    role: \"assistant\",\n};\n","export const rerankerResponse: any = {\n    content: `\n    Based on the cases you mentioned, the prominent legal precedents in Washington related to water leaking into an apartment from the floor above and involving damages to property or interference with tenants' use can be categorized as follows:\n\n    &nbsp;&nbsp;&nbsp;&nbsp;<b>1. Tenant-Landlord Liability:</b>\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• Geise v. Lee, 84 Wn.2d 866 (1975): Recognizes that landlords have an affirmative duty to maintain common areas, including ensuring that they are free from hazards such as accumulations of snow and ice. This case supports the idea that landlords have a duty to maintain the property in a reasonably safe condition.\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• McCutcheon v. United Homes Corp., 79 Wn.2d 443 (1971): Expanded landlord's responsibilities, stating that the landlord cannot passively refrain from negligent conduct and has an affirmative obligation to keep common areas in a reasonably safe condition.\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• Reardon v. Shimelman, 102 Conn. 383 (1925): This case implied that landlords may be held accountable for failing to address water leaks and other hazards in the premises they control.\n\n    &nbsp;&nbsp;&nbsp;&nbsp;<b>2. Implied Warranty of Habitability:</b>\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• Javins v. First Nat'l Realty Corp., 428 F.2d 1071 (D.C. Cir. 1970): Established that residential leases carry an implied warranty of habitability, meaning that premises must be livable and free from hazards. This includes the duty to repair water leaks that may damage property or interfere with tenants’ enjoyment.\n    \n    &nbsp;&nbsp;&nbsp;&nbsp;<b>3. Damages and Injunctions in Property Cases:</b>\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• Woldson v. Woodhead, 129 Wn. App. 1009 (2005): Involved ongoing damages from continuous trespass and recognized that continuing damages might require successive lawsuits, emphasizing the importance of addressing property damage promptly and effectively.\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• Donworth v. St. Paul Etc. R. Co., 39 Wash. 355 (1905): Established that negligence could be considered in landlord-tenant disputes, specifically in maintaining common areas like stairways, which can extend to maintaining plumbing systems to prevent leaks.\n\n    &nbsp;&nbsp;&nbsp;&nbsp;<b>4. Landlord’s Obligation to Address Water Leaks:</b>\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• Senske v. Washington Gas & Elec. Co., 165 Wash. 1 (1931): Held that utilities, including water, need to be maintained to prevent property damage, reinforcing that landlords need to maintain functional and safe premises.\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• Evans v. Seattle, 182 Wash. 450 (1935): Discussed the responsibilities of landowners and municipalities regarding water drainage and damages caused by improper maintenance of water systems.\n\n    From these precedents, it’s clear that Washington law places a strong responsibility on landlords to maintain premises in a safe condition and remedy hazards such as water leaks promptly. Failure to do so may constitute a breach of the implied warranty of habitability, negligence, and could result in damages or injunctive relief. Tenants affected by water leaks from the floor above can potentially seek redress for damages under these principles.\n    `,\n    role: \"assistant\",\n};\n","export const graphResponse: any = {\n    content: `\n    The prominent legal precedents in Washington regarding water leaking into an apartment from the floor above are based on two main legal principles: the duty of care in maintaining premises and the implied warranty of habitability.\n\n    &nbsp;&nbsp;&nbsp;&nbsp;<b>1. Duty of Care in Maintaining Premises:</b>\n    This principle holds landlords responsible for maintaining the premises in a safe and habitable condition, especially when defects are known or should have been known to them. The landlord must ensure that the property does not pose a danger to the tenants.\n    \n    &nbsp;&nbsp;&nbsp;&nbsp;<b>Prominent Cases:</b>\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• Martindale Clothing Co. v. Spokane & Eastern Trust Co. (1914): The court held the landlord liable for damages caused by water leaking from a pipe in the upper story, which the landlord failed to maintain properly. The landlord's negligence in maintaining the water pipe led to the flooding of the tenant's store, causing significant damage.\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• Thomas v. Housing Authority of the City of Bremerton (1967): The court found the landlord liable for injuries caused by excessively hot water from a water heater, which was a known defect. The landlord's failure to maintain the water heater in a safe condition constituted negligence.\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• Jorgensen v. Massart (1963): The court held that the landlord was responsible for damages caused by water leaking into the tenant's apartment due to the landlord's failure to maintain the building's roof properly.\n\n    &nbsp;&nbsp;&nbsp;&nbsp;<b>2. Implied Warranty of Habitability</b>\n    This principle implies that landlords must provide and maintain rental properties in a condition fit for human habitation. This includes ensuring that essential services such as plumbing are functional and do not pose health hazards.\n\n    &nbsp;&nbsp;&nbsp;&nbsp;<b>Prominent Cases:</b>\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• Foisy v. Wyman (1973): The court recognized the implied warranty of habitability, holding that landlords must maintain rental properties in a habitable condition. The tenant was allowed to present evidence of the landlord's failure to repair significant defects, including water leaks, as a defense in an unlawful detainer action.\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• Stuart v. Coldwell Banker Commercial Group, Inc. (1987): The court extended the implied warranty of habitability to condominium units, requiring that common areas and limited common areas be maintained in a condition fit for their intended use. The landlord was held liable for failing to address water leaks and other defects.\n\n   <b>Summary</b>\n    In Washington, landlords are required to maintain rental properties in a safe and habitable condition. Failure to address known defects, such as water leaks from the floor above, can result in liability for damages under the principles of duty of care and implied warranty of habitability. Prominent cases such as Martindale Clothing Co. v. Spokane & Eastern Trust Co., Thomas v. Housing Authority of the City of Bremerton, Jorgensen v. Massart, Foisy v. Wyman, and Stuart v. Coldwell Banker Commercial Group, Inc. illustrate these principles and the legal obligations of landlords.\n    `,\n    role: \"assistant\",\n};\n","import { useRef, useState, useEffect, useContext } from \"react\";\nimport { Panel, DefaultButton, TextField, SpinButton, Slider, Checkbox } from \"@fluentui/react\";\nimport { SparkleFilled } from \"@fluentui/react-icons\";\n\nimport styles from \"./Chat.module.css\";\n\nimport { RetrievalMode, PAIDRetrievalMode, RAGChatCompletion, RAGChatCompletionDelta, ChatAppRequestOptions } from \"../../api\";\nimport { AIChatProtocolClient, AIChatMessage } from \"@microsoft/ai-chat-protocol\";\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { SettingsButton } from \"../../components/SettingsButton\";\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\nimport { VectorSettings } from \"../../components/VectorSettings\";\nimport { AppStateContext } from '../../AppStateContext/AppStateContext';\n\nimport { simpleResponse } from \"../../hack/simpleResponse\";\nimport { rerankerResponse } from \"../../hack/rerankerResponse\";\nimport { graphResponse } from \"../../hack/graphResponse\";\n\nconst Chat = () => {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [temperature, setTemperature] = useState<number>(0.3);\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [useAdvancedFlow, setUseAdvancedFlow] = useState<boolean>(true);\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\n\n    const appStateContext = useContext(AppStateContext);\n    if (!appStateContext) {\n        throw new Error('Layout component must be used within an AppStateProvider');\n    }\n    const { sharedState, setSharedState } = appStateContext;\n\n    const lastQuestionRef = useRef<string>(\"\");\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\n    const [answers, setAnswers] = useState<[user: string, response: RAGChatCompletion][]>([]);\n    const [streamedAnswers, setStreamedAnswers] = useState<[user: string, response: RAGChatCompletion][]>([]);\n\n    const handleAsyncRequest = async (question: string, answers: [string, RAGChatCompletion][], result: AsyncIterable<RAGChatCompletionDelta>) => {\n        let answer = \"\";\n        let chatCompletion: RAGChatCompletion = {\n            context: {\n                data_points: {},\n                followup_questions: null,\n                thoughts: []\n            },\n            message: { content: \"\", role: \"assistant\" }\n        };\n        const updateState = (newContent: string) => {\n            return new Promise(resolve => {\n                setTimeout(() => {\n                    answer += newContent;\n                    // We need to create a new object to trigger a re-render\n                    const latestCompletion: RAGChatCompletion = {\n                        ...chatCompletion,\n                        message: { content: answer, role: chatCompletion.message.role }\n                    };\n                    setStreamedAnswers([...answers, [question, latestCompletion]]);\n                    resolve(null);\n                }, 33);\n            });\n        };\n        try {\n            setIsStreaming(false);\n            for await (const response of result) {\n                if (response.context) {\n                    chatCompletion.context = {\n                        ...chatCompletion.context,\n                        ...response.context\n                    };\n                }\n                if (response.delta && response.delta.role) {\n                    chatCompletion.message.role = response.delta.role;\n                }\n                if (response.delta && response.delta.content) {\n                    // setIsLoading(false);\n                    await updateState(response.delta.content);\n                }\n            }\n        } finally {\n            setIsStreaming(false);\n        }\n        chatCompletion.message.content = answer;\n        return chatCompletion;\n    };\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        try {\n            const messages: AIChatMessage[] = answers.flatMap(answer => [\n                { content: answer[0], role: \"user\" },\n                { content: answer[1].message.content, role: \"assistant\" }\n            ]);\n            const allMessages: AIChatMessage[] = [...messages, { content: question, role: \"user\" }];\n            const options: ChatAppRequestOptions = {\n                context: {\n                    overrides: {\n                        use_advanced_flow: useAdvancedFlow,\n                        top: retrieveCount,\n                        retrieval_mode: retrievalMode,\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\n                        temperature: temperature\n                    }\n                },\n                sessionState: answers.length ? answers[answers.length - 1][1].sessionState : null\n            };\n            const chatClient: AIChatProtocolClient = new AIChatProtocolClient(\"/chat\");\n            if (shouldStream) {\n                const result = (await chatClient.getStreamedCompletion(allMessages, options)) as AsyncIterable<RAGChatCompletionDelta>;\n                var parsedResponse = await handleAsyncRequest(question, answers, result);\n\n                switch (sharedState)\n                {\n                    case PAIDRetrievalMode.Vector:\n                        parsedResponse = { ...parsedResponse, message: simpleResponse };\n                        break;\n\n                    case PAIDRetrievalMode.Semantic:\n                        parsedResponse = { ...parsedResponse, message: rerankerResponse };\n                        break;\n\n                    case PAIDRetrievalMode.GraphRAG:\n                        parsedResponse = { ...parsedResponse, message: graphResponse };\n                        break;\n                }\n\n                //parsedResponse = { ...parsedResponse, message: sharedState == PAIDRetrievalMode.Vector ? simpleResponse : rerankerResponse };\n\n                setAnswers([...answers, [question, parsedResponse]]);\n            } else {\n                const result = (await chatClient.getCompletion(allMessages, options)) as RAGChatCompletion;\n                setAnswers([...answers, [question, result]]);\n            }\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const clearChat = () => {\n        lastQuestionRef.current = \"\";\n        error && setError(undefined);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n        setAnswers([]);\n        setStreamedAnswers([]);\n        setIsLoading(false);\n        setIsStreaming(false);\n    };\n\n    // useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\n    // useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"auto\" }), [streamedAnswers]);\n\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplate(newValue || \"\");\n    };\n\n    const onTemperatureChange = (\n        newValue: number,\n        range?: [number, number],\n        event?: React.MouseEvent | React.TouchEvent | MouseEvent | TouchEvent | React.KeyboardEvent\n    ) => {\n        setTemperature(newValue);\n    };\n\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setRetrieveCount(parseInt(newValue || \"3\"));\n    };\n\n    const onUseAdvancedFlowChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseAdvancedFlow(!!checked);\n    };\n\n    const onShouldStreamChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setShouldStream(!!checked);\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n    };\n\n    const onShowCitation = (citation: string, index: number) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.commandsContainer}>\n                <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\n                {false && (<SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} /> )}\n            </div>\n            <div className={styles.chatRoot}>\n                {!activeAnalysisPanelTab && (\n                    <div className={styles.chatContainer}>\n                        {!lastQuestionRef.current ? (\n                            <div className={styles.chatEmptyState}>\n                                <SparkleFilled fontSize={\"120px\"} primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Chat logo\" />\n                                <h1 className={styles.chatEmptyStateTitle}>US Case Law Database</h1>\n                                <h2 className={styles.chatEmptyStateSubtitle}>Ask anything or try an example</h2>\n                                <ExampleList onExampleClicked={onExampleClicked} />\n                            </div>\n                        ) : (\n                            <div className={styles.chatMessageStream}>\n                                {isStreaming &&\n                                    streamedAnswers.map((streamedAnswer, index) => (\n                                        <div key={index}>\n                                            <UserChatMessage message={streamedAnswer[0]} />\n                                            <div className={styles.chatMessageGpt}>\n                                                <Answer\n                                                    isStreaming={true}\n                                                    key={index}\n                                                    answer={streamedAnswer[1]}\n                                                    isSelected={false}\n                                                    onCitationClicked={c => onShowCitation(c, index)}\n                                                    onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                    onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                    onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                />\n                                            </div>\n                                        </div>\n                                    ))}\n                                {!isStreaming &&\n                                    answers.map((answer, index) => (\n                                        <div key={index}>\n                                            <UserChatMessage message={answer[0]} />\n                                            <div className={styles.chatMessageGpt}>\n                                                <Answer\n                                                    isStreaming={false}\n                                                    key={index}\n                                                    answer={answer[1]}\n                                                    isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\n                                                    onCitationClicked={c => onShowCitation(c, index)}\n                                                    onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                    onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                    onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                />\n                                            </div>\n                                        </div>\n                                    ))}\n                                {isLoading && (\n                                    <>\n                                        <UserChatMessage message={lastQuestionRef.current} />\n                                        <div className={styles.chatMessageGptMinWidth}>\n                                            <AnswerLoading />\n                                        </div>\n                                    </>\n                                )}\n                                {error ? (\n                                    <>\n                                        <UserChatMessage message={lastQuestionRef.current} />\n                                        <div className={styles.chatMessageGptMinWidth}>\n                                            <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                                        </div>\n                                    </>\n                                ) : null}\n                                <div ref={chatMessageStreamEnd} />\n                            </div>\n                        )}\n\n                        <div className={styles.chatInput}>\n                            <QuestionInput\n                                clearOnSend\n                                placeholder=\"Type a new question\"\n                                disabled={isLoading}\n                                onSend={question => makeApiRequest(question)}\n                            />\n                        </div>\n                    </div>\n                )}\n\n                {answers.length > 0 && activeAnalysisPanelTab && (\n                    <AnalysisPanel\n                        className={styles.chatAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\n                        citationHeight=\"810px\"\n                        answer={answers[selectedAnswer][1]}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n\n                <Panel\n                    headerText=\"Configure answer generation\"\n                    isOpen={isConfigPanelOpen}\n                    isBlocking={false}\n                    onDismiss={() => setIsConfigPanelOpen(false)}\n                    closeButtonAriaLabel=\"Close\"\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\n                    isFooterAtBottom={true}\n                >\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useAdvancedFlow}\n                        label=\"Use advanced flow with query rewriting and filter formulation. Not compatible with Ollama models.\"\n                        onChange={onUseAdvancedFlowChange}\n                    />\n\n                    <h3>Settings for database search:</h3>\n\n                    <SpinButton\n                        className={styles.chatSettingsSeparator}\n                        label=\"Retrieve this many matching rows:\"\n                        min={1}\n                        max={50}\n                        defaultValue={retrieveCount.toString()}\n                        onChange={onRetrieveCountChange}\n                    />\n\n                    <VectorSettings updateRetrievalMode={(retrievalMode: RetrievalMode) => setRetrievalMode(retrievalMode)} />\n\n                    <h3>Settings for final chat completion:</h3>\n\n                    <TextField\n                        className={styles.chatSettingsSeparator}\n                        defaultValue={promptTemplate}\n                        label=\"Override prompt template\"\n                        multiline\n                        autoAdjustHeight\n                        onChange={onPromptTemplateChange}\n                    />\n\n                    <Slider\n                        className={styles.chatSettingsSeparator}\n                        label=\"Temperature\"\n                        min={0}\n                        max={1}\n                        step={0.1}\n                        defaultValue={temperature}\n                        onChange={onTemperatureChange}\n                        showValue\n                        snapToStep\n                    />\n\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={shouldStream}\n                        label=\"Stream chat completion responses\"\n                        onChange={onShouldStreamChange}\n                    />\n                </Panel>\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\nimport { initializeIcons } from \"@fluentui/react\";\nimport { AppStateProvider } from './AppStateContext/AppStateContext'; \n\nimport \"./index.css\";\n\nimport Layout from \"./pages/layout/Layout\";\nimport Chat from \"./pages/chat/Chat\";\n\nvar chat = <Chat />;\n\ninitializeIcons();\n\nconst router = createHashRouter([\n    {\n        path: \"/\",\n        element: (\n            <AppStateProvider>\n                <Layout />\n            </AppStateProvider>\n        ),\n        children: [\n            {\n                index: true,\n                element: chat\n            },\n            {\n                path: \"*\",\n                lazy: () => import(\"./pages/NoPage\")\n            }\n        ]\n    }\n]);\n\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n    <React.StrictMode>\n        <RouterProvider router={router} />\n    </React.StrictMode>\n);\n"],"file":"assets/index-286963bf.js"}